package com.telegrambot;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

public class MyBot extends TelegramLongPollingBot {

    private final Map<Long, UserSession> sessions = new HashMap<>();
    private final GoogleSheetsService googleSheetsService = new GoogleSheetsService();

    // ‚úÖ –ö–∞—Ä—Ç–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã Telegram –∏–º—ë–Ω –Ω–∞ –ø–æ–ª–Ω—ã–µ
private static final Map<String, String> nameMap = Map.of(
    "ARTEM", "–ê—Ä—Ç—ë–º –ü—É—à–∫–æ–≤",
    "Anatoliy Switch", "–ê–Ω–∞—Ç–æ–ª–∏–π –ü–µ—Ç—Ä–æ–≤",
    "–í–∞–ª–µ—Ä–∏—è", "–ì–µ—Ä–∞—Å–∏–º—á—É–∫ –õ–µ—Ä–∞",
    "Darja Timo≈°enko", "–î–∞—Ä—å—è –¢–∏–º–æ—à–µ–Ω–∫–æ",
    "Evgenya", "–ï–≤–≥–µ–Ω–∏—è –õ–∏—Å–∏—Ü–∞",
    "Jane157", "–ï–≤–≥–µ–Ω–∏—è –û—Ä–ª–æ–≤–∞"
);

    @Override
    public String getBotUsername() {
        return "PodarkingShiftBot"; // ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ username –∏–∑ BotFather (–Ω–∞–ø—Ä–∏–º–µ—Ä: info_collector_java_bot)
    }

    @Override
    public String getBotToken() {
        return System.getenv("BOT_TOKEN"); // ‚Üê –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç BotFather
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (!update.hasMessage() || !update.getMessage().hasText()) return;

        Message msg = update.getMessage();
        long chatId = msg.getChatId();
        String text = msg.getText().trim();

        if (text.equalsIgnoreCase("/dinner") && sessions.containsKey(chatId)) {
            UserSession session = sessions.get(chatId);
            session.step = BotStep.LUNCH;
            sendWithButtons(chatId, "–°–∫–æ–ª—å–∫–æ –¥–ª–∏–ª—Å—è –æ–±–µ–¥?", "00:15", "00:30", "00:45", "01:00", "–ë–µ–∑ –æ–±–µ–¥–∞");
            return;
        }

        // –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –≤–≤—ë–ª /start ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
        if (text.equalsIgnoreCase("/start")) {
            UserSession newSession = new UserSession();
            String rawFirstName = msg.getFrom().getFirstName();
            String rawLastName = msg.getFrom().getLastName();
            String tgFullName = (rawLastName != null) ? rawFirstName + " " + rawLastName : rawFirstName;

            String correctedName = nameMap.getOrDefault(tgFullName, tgFullName);

            newSession.fullName = correctedName;
            newSession.date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd.MM.yyyy"));
            newSession.step = BotStep.PROJECT;

            sessions.put(chatId, newSession);

            SendMessage message = new SendMessage();
            message.setChatId(String.valueOf(chatId));
            message.setText("–ü—Ä–∏–≤–µ—Ç, " + newSession.fullName + "! üëã\n\n" +
                "–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞: *" + newSession.date + "*\n\n" +
                "*–ù–∞—á–Ω—ë–º!* üöÄ\n–ù–∞ –∫–∞–∫–æ–º –ø—Ä–æ–µ–∫—Ç–µ —Ç—ã —Ä–∞–±–æ—Ç–∞–ª(–∞)? (–∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–î—Ä—É–≥–æ–µ')");
            message.setParseMode("Markdown");
            try {
                execute(message);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
            return;
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ ‚Äî –ø—Ä–æ—Å–∏–º –Ω–∞–ø–∏—Å–∞—Ç—å /start
        if (!sessions.containsKey(chatId)) {
            sendMessage(chatId, "–ù–∞—á–Ω–∏ –æ—Ç—á—ë—Ç –∫–æ–º–∞–Ω–¥–æ–π /start");
            return;
        }

        UserSession session = sessions.get(chatId);

        switch (session.step) {
            case LUNCH -> {
    session.lunchDuration = text;

    try {
        List<Object> row = List.of(
                safe(session.fullName),
                safe(session.date),
                "", // workHours
                safe(session.lunchDuration),
                "", // project
                "", // activity
                "", // activityTime
                "–ë—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –æ–±–µ–¥", // comment
                "", // –ø—É—Å—Ç–∞—è –∫–æ–ª–æ–Ω–∫–∞ I
                java.time.ZonedDateTime.now(java.time.ZoneId.of("Europe/Belgrade"))
                    .format(java.time.format.DateTimeFormatter.ofPattern("HH:mm:ss")) // timestamp –∫–æ–ª–æ–Ω–∫–∞ J
        );
        String timestamp = java.time.ZonedDateTime.now(java.time.ZoneId.of("Europe/Belgrade"))
                .format(java.time.format.DateTimeFormatter.ofPattern("HH:mm:ss"));
        List<Object> rowForThirdSheet = new ArrayList<>();
        rowForThirdSheet.add(safe(session.fullName));     // A
        rowForThirdSheet.add(safe(session.date));         // B
        rowForThirdSheet.add("");                          // C
        rowForThirdSheet.add(safe(session.lunchDuration));// D
        rowForThirdSheet.add("");                          // E –ø—É—Å—Ç–æ–π
        rowForThirdSheet.add("");                          // F
        rowForThirdSheet.add("");                          // G
        rowForThirdSheet.add("");                          // H
        rowForThirdSheet.add("–ë—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –æ–±–µ–¥");        // I
        rowForThirdSheet.add("");                          // J –ø—É—Å—Ç–æ–π
        rowForThirdSheet.add("");                          // K –ø—É—Å—Ç–æ–π
        rowForThirdSheet.add(timestamp);                   // L
        googleSheetsService.appendRow(row);
        googleSheetsService.appendRowToSecondSheet(row);
        googleSheetsService.appendRowToThirdSheet(rowForThirdSheet);
        sendMessage(chatId, "‚úÖ –û–±–µ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! ‚úÖ");
    } catch (Exception e) {
        sendMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –æ–±–µ–¥–∞ –≤ —Ç–∞–±–ª–∏—Ü—É: " + e.getMessage());
        e.printStackTrace();
    }

    session.step = BotStep.DONE;
}
            case PROJECT -> {
                session.project = text;
                session.step = BotStep.ACTIVITY;
                sendWithButtons(chatId, "–í—ã–±–µ—Ä–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å:", "–ü–æ—à–∏–≤", "–ö—Ä–æ–π", "–ù–∞–Ω–µ—Å–µ–Ω–∏–µ", "–û–¢–ö", "–ü–µ—Ä–µ–¥–µ–ª–∫–∏", "–î—Ä—É–≥–æ–µ", "–ó–∞–∫—É–ø–∫–∏", "–î–∏–∑–∞–π–Ω", "–ü–ü–û", "–ü–µ—á–∞—Ç—å");
            }
            case ACTIVITY -> {
                session.activity = text;
                session.step = BotStep.ACTIVITY_TIME;
                sendMessage(chatId, "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω—è–ª–∞ —ç—Ç–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å? (—Ñ–æ—Ä–º–∞—Ç HH:MM)");
            }
            case ACTIVITY_TIME -> {
                if (TimeValidator.isInvalid(text)) {
                    sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01:20)");
                    return;
                }
                session.activityTime = text;
                session.step = BotStep.COMMENT;
                sendMessage(chatId, "–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å–≤–æ–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:");
            }
            case COMMENT -> {
                session.comment = text;
                try {
                    List<Object> row = List.of(
                            safe(session.fullName),
                            safe(session.date),
                            safe(session.workHours),
                            safe(session.lunchDuration),
                            safe(session.project),
                            safe(session.activity),
                            safe(session.activityTime),
                            safe(session.comment),
                            "", // –ø—É—Å—Ç–∞—è –∫–æ–ª–æ–Ω–∫–∞ I
                            java.time.ZonedDateTime.now(java.time.ZoneId.of("Europe/Belgrade"))
                                .format(java.time.format.DateTimeFormatter.ofPattern("HH:mm:ss")) // timestamp –∫–æ–ª–æ–Ω–∫–∞ J
                    );
                    String timestamp = java.time.ZonedDateTime.now(java.time.ZoneId.of("Europe/Belgrade"))
                            .format(java.time.format.DateTimeFormatter.ofPattern("HH:mm:ss"));
                    List<Object> rowForThirdSheet = new ArrayList<>();
                    rowForThirdSheet.add(safe(session.fullName));     // A
                    rowForThirdSheet.add(safe(session.date));         // B
                    rowForThirdSheet.add(safe(session.workHours));    // C
                    rowForThirdSheet.add(safe(session.lunchDuration));// D
                    rowForThirdSheet.add("");                          // E –ø—É—Å—Ç–æ–π
                    rowForThirdSheet.add(safe(session.project));      // F
                    rowForThirdSheet.add(safe(session.activity));     // G
                    rowForThirdSheet.add(safe(session.activityTime)); // H
                    rowForThirdSheet.add(safe(session.comment));      // I
                    rowForThirdSheet.add("");                          // J –ø—É—Å—Ç–æ–π
                    rowForThirdSheet.add("");                          // K –ø—É—Å—Ç–æ–π
                    rowForThirdSheet.add(timestamp);                   // L
                    googleSheetsService.appendRow(row);
                    googleSheetsService.appendRowToSecondSheet(row);
                    googleSheetsService.appendRowToThirdSheet(rowForThirdSheet);
                    sendMessage(chatId, "‚úÖ –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω! ‚úÖ");
                } catch (Exception e) {
                    sendMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É: " + e.getMessage());
                    e.printStackTrace();
                }

                session.step = BotStep.DONE;
            }
            case DONE ->
                    sendMessage(chatId, "–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç, –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –≤—Ä–µ–º—è? –°–Ω–æ–≤–∞ –∂–º–∏ /start –∏–ª–∏ –∂–º–∏ /dinner —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –æ–±–µ–¥");
        }
    }

    private void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        message.setReplyMarkup(null); // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendWithButtons(long chatId, String text, String... options) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);

        List<KeyboardRow> rows = new ArrayList<>();
        KeyboardRow row = new KeyboardRow();

        for (int i = 0; i < options.length; i++) {
            row.add(options[i]);
            if ((i + 1) % 3 == 0) { // 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
                rows.add(row);
                row = new KeyboardRow();
            }
        }
        if (!row.isEmpty()) rows.add(row);

        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setKeyboard(rows);
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(true);
        message.setReplyMarkup(keyboard);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private String safe(String value) {
        return value != null ? value : "";
    }

}
